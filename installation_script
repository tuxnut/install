#! /usr/bin/env $0
# Author tuxnut

# This is my personal installation setup
cmd_install=
cmd_pip_install=
cmd_add_repo=
cmd_update=
cmd_remove=
cmd_clean=
tmp_git_dir=
git_repo="https://github.com/tuxnut/install"
update_script=

write_update_script() {
	update_script="update"
	echo '#! /usr/bin/env $0' > $update_script
	echo  >> $update_script
	echo "$cmd_update" >> $update_script
	echo "$cmd_clean" >> $update_script
}

# Determination of the package manager
echo "Select your package manager :"
select p_m in "apt" "pacman"; do
	case $p_m in
		apt ) break;;
		pacman ) break;;
	esac
done

if [ "$p_m" == "apt" ]; then
	cmd_install="sudo apt install"
	cmd_pip_install="pip install --user"
	cmd_update="sudo apt update && sudo apt upgrade"
	cmd_remove="sudo apt remove"
	cmd_clean="sudo apt autoremove && sudo apt autoclean"
	cmd_add_repo="sudo add-apt-repository -y"
elif [ "$p_m" == "pacman" ]; then
	cmd_install="pacman -S"
	cmd_pip_install="pip install --user"
	cmd_update="yay -Syu"
	cmd_remove="yay -R"
fi

# First update
$cmd_update

# Preparation
if [ "$p_m" == "apt" ]; then
	$cmd_add_repo 'ppa:numix/ppa'
	$cmd_add_repo 'ppa:ricotz/docky'
elif [ "$p_m" == "pacman" ]; then
	$cmd_install 'yay'
	cmd_install="yay -S"
fi

# Installing main packages with common name for both distro
echo && echo "======> Installing main packages"
$cmd_install 'autoconf automake baobab cmatrix curl gimp git gnome-system-monitor gnome-themes-standard gparted guake meld mpv neofetch network-manager numix-icon-theme-circle pkg-config plank python-pip pwgen sassc tree wireshark zsh'

# Installing packages with different name
if [ "$p_m" != "apt" ];then
	$cmd_install 'build-essential'
	echo && echo "======> Installing arc-flatabulous theme"
	$cmd_install 'libgtk-3-dev gtk2-engines-murrine'
	tmp_dir=$(mktemp -d) && cd $tmp_dir
	git clone https://github.com/andreisergiu98/arc-flatabulous-theme --depth 1 && cd arc-flatabulous-theme
	./autogen.sh --prefix=/usr
	sudo make install
	cd && rm -r "$tmp_dir"
	
	echo && echo "======> Chrome"
	sudo sh -c 'echo "deb [arch=amd64] https://dl.google.com.linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
	wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
	$cmd_update
	$cmd_install 'google-chrome-stable'
	
	echo && echo "======> VSCode"
	curl https://pacakges.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
	sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
	sudo sh -c 'echo "deb [arch=amd64] https://pacakges.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
	$cmd_install apt-transport-https
	$cmd_update
	$cmd_install code
	
elif [ "$p_m" != "pacman" ];then
	$cmd_install 'base-devel google-chrome visual-studio-code-bin gtk-arc-flatabulous-theme'
fi

# zsh configuration (oh-my-zsh)
echo && echo "======> zsh configurations"
chsh -s $(which zsh)
sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"

# git configurations
echo && echo "======> git configurations"
git config --global user.name "tuxnut"
git config --global user.email "tuxnut.cat@gmail.com"
git config --global alias.lg "log --oneline --graph"
#	git config --global credential.helper 'cache --timeout 900' # in seconds

# Get the repo
echo && echo "======> Dl needed files"
# cloning
tmp_git_dir=$(mktemp -d) && cd $tmp_git_dir
git clone "$git_repo"
tmp_git_dir="$tmp_git_dir/install"
# zsh files
mv -f "$tmp_git_dir/.zshrc" "~/.zshrc"
mv "$tmp_git_dir/tuxnut.zsh-theme" "~/.oh-my-zsh/themes"
# ssh files
# vscode preferences
mv -f "$tmp_git_dir/settings.json" "~/.config/Code/User"
mv -f "$tmp_git_dir/cpp.json" "~/.config/Code/User/snippets/"
mv -f "$tmp_git_dir/java.json" "~/.config/Code/User/snippets/"
mv -f "$tmp_git_dir/javascript.json" "~/.config/Code/User/snippets/"
mv -f "$tmp_git_dir/shellscript.json" "~/.config/Code/User/snippets/"
mv -f "$tmp_git_dir/latex.json" "~/.config/Code/User/snippets/"
# extract script
chmod +x "$tmp_git_dir/extract"
sudo mv -f "$tmp_git_dir/extract" "/usr/local/bin"
# update script
write_update_script
chmod +x "./$update_script"
mv -f "./$update_script" "/usr/local/bin"

# somewhat risky
rm -r "$tmp_git_dir"

# Final cleanup
echo && echo "======> Cleanup"
$cmd_clean

